@default = "dragAndDropToObject"
definition {

	function dragAndDrop {
		WaitForSPARefresh();

		selenium.dragAndDrop();

		selenium.assertJavaScriptErrors();

		selenium.assertLiferayErrors();
	}

	function dragAndDropPortletToObject {
		WaitForSPARefresh();

		selenium.waitForElementPresent("${locator1}");

		selenium.mouseOver("${locator1}");

		selenium.waitForVisible("${locator1}");

		selenium.waitForTextCaseInsensitive("${locator1}", "${value1}");

		selenium.waitForVisible("${locator2}");

		selenium.mouseOver("${locator2}");

		selenium.mouseDown("${locator1}");

		selenium.mouseMoveAt("${locator2}", "0,50");

		selenium.mouseMoveAt("${locator2}", "0,-50");

		selenium.mouseMoveAt("${locator2}", "0,50");

		selenium.mouseMove("${locator2}");

		selenium.pause("3000");

		selenium.mouseRelease("${locator2}");

		selenium.assertJavaScriptErrors();

		selenium.assertLiferayErrors();
	}

	function dragAndDropToObject {
		WaitForSPARefresh();

		selenium.waitForVisible("${locator1}");

		selenium.mouseOver("${locator1}");

		selenium.waitForPartialTextCaseInsensitive("${locator1}", "${value1}");

		selenium.waitForVisible("${locator2}");

		selenium.mouseOver("${locator2}");

		selenium.dragAndDropToObject("${locator1}", "${locator2}");

		selenium.assertJavaScriptErrors();

		selenium.assertLiferayErrors();
	}

	function javaScriptDragAndDropPageToUp {
		WaitForSPARefresh();

		var javaScript = '''
Simulate = {
	dragAndDrop: async function(source, target) {
		const dataTransfer = new DataTransfer();

		const dispatchEvent = async(type, element) => {
			const rect = element.getBoundingClientRect();

			const event = new DragEvent(
				type,{
					bubbles: true,
					clientX: rect.left + (rect.width / 2),
					clientY: -rect.top + (rect.height / 2),
					dataTransfer: dataTransfer,
					relatedTarget: element
				});

			element.dispatchEvent(event);
		};

		await dispatchEvent('dragstart', source);

		await dispatchEvent('dragover', target);

		await dispatchEvent('drop', target);

		await dispatchEvent('dragend', source);
	}
};

function getWebElement(locator) {
	return document.evaluate(locator, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
}

Simulate.dragAndDrop(getWebElement(arguments[0]), getWebElement(arguments[1]));

		''';

		selenium.executeJavaScript("${javaScript}", "${locator1}", "${locator2}");

		selenium.assertJavaScriptErrors();

		selenium.assertLiferayErrors();
	}

	function javaScriptDragAndDropToObject {
		WaitForSPARefresh();

		selenium.waitForVisible("${locator1}");

		selenium.mouseOver("${locator1}");

		selenium.waitForPartialTextCaseInsensitive("${locator1}", "${value1}");

		selenium.waitForVisible("${locator2}");

		selenium.mouseOver("${locator2}");

		selenium.javaScriptDragAndDropToObject("${locator1}", "${locator2}");

		selenium.assertJavaScriptErrors();

		selenium.assertLiferayErrors();
	}

	function javaScriptDragOver {
		WaitForSPARefresh();

		selenium.waitForVisible("${locator1}");

		selenium.mouseOver("${locator1}");

		selenium.waitForPartialTextCaseInsensitive("${locator1}", "${value1}");

		selenium.waitForVisible("${locator2}");

		selenium.mouseOver("${locator2}");

		selenium.javaScriptDragOver("${locator1}", "${locator2}");

		selenium.assertJavaScriptErrors();

		selenium.assertLiferayErrors();
	}

}
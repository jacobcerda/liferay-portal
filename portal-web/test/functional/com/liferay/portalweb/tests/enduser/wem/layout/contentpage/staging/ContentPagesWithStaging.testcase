@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Activate local live staging") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name");

			Staging.activateStagingCP(siteName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name-staging");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name-staging",
				layoutName = "Test Content Page Name",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");
		}

		task ("Add a Title fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text",
				targetFragmentName = "Title");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Published content pages should remain if staging is deactivated."
	@priority = "4"
	test DeactivateStagingAfterPublish {
		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Deactivate staging") {
			Staging.deactivateStagingCP(siteName = "Test Site Name");
		}

		task ("Navigate to the content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Title fragment is still present after deactivating staging") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is still present after deactivating staging") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "Content pages only appear in live view after being published and should appear properly."
	@priority = "5"
	test PublishContentPage {
		property portal.acceptance = "true";

		task ("Navigate to the content page in the staging site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is present") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Navigate to the URL of what the content page should be in the live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the content page does not yet exist in the live site") {
			AssertTextPresent(value1 = "The requested resource could not be found.");
		}

		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to the content page in the live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is present") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "Edits made to existing content pages should not appear in the live site until after published."
	@priority = "5"
	test PublishEditedContentPage {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "false";
		property portal.acceptance = "false";

		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to the content page in the staging site at Edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");
		}

		task ("Add a Content fragment") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Content",
				targetFragmentName = "Rich Text");
		}

		task ("Edit the Rich Text fragment's editable text") {
			PageEditor.editFragmentText(
				contributed = "false",
				fragmentName = "Rich Text",
				id = "rich-text",
				text = "New editable fragment text");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment with updated editable text is present") {
			AssertVisible(
				key_content = "New editable fragment text",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Content fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
				key_fragmentClass = "body",
				key_position = "3",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Navigate to the content page in the live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment with its original editable text is present") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Content fragment is not present") {
			AssertElementNotPresent(
				key_content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
				key_fragmentClass = "body",
				key_position = "3",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to the content page in the live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment with updated editable text is present") {
			AssertVisible(
				key_content = "New editable fragment text",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Content fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
				key_fragmentClass = "body",
				key_position = "3",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "This is a test for LPS-112093. The Web Content Articles of collection are displayed normally when enable local staging."
	@priority = "4"
	test ViewWCViaContentDisplayInCollectionDisplayWithLocalLiveStaging {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name-staging",
			layoutName = "Test Content Page Name 2",
			site = "false",
			type = "content");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name-staging");

		for (var i : list "1,2,3") {
			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Web Content Content ${i}",
				webContentTitle = "Web Content Title ${i}");

			PortletEntry.publish();
		}

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name-staging");

		AssetListsAdmin.addDynamicSelection(assetListTitle = "Dynamic Asset List Test");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name-staging");

		AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Asset List Test");

		AssetListsAdmin.configureAssetEntryType(selectedAsset = "Web Content Article");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name 2",
			siteName = "Test Site Name Staging");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			assetListName = "Dynamic Asset List Test",
			fragmentName = "Collection Display");

		for (var i : list "1,2,3") {
			if ("${i}" == "1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title 3",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");
			}
			if ("${i}" == "2") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${i}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");
			}
			if ("${i}" == "3") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title 1",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");
			}
		}

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Content Display",
			entryTitle = "Web Content Title 3",
			fragmentName = "Content Display");

		for (var i : list "1,2,3") {
			if ("${i}" == "1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryContent = "Web Content Content 3",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");
			}
			if ("${i}" == "2") {
				AssertVisible(
					key_colPosition = "1",
					key_entryContent = "Web Content Content ${i}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");
			}
			if ("${i}" == "3") {
				AssertVisible(
					key_colPosition = "1",
					key_entryContent = "Web Content Content 1",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");
			}
		}

		PageEditor.waitForAutoSave();

		PageEditor.gotoConfiguration(fragmentName = "Content Display");

		AssertSelectedLabel(
			key_fieldLabel = "Template",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Default Template");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Content Page Name 2",
			siteName = "Test Site Name Staging");

		for (var i : list "1,2,3") {
			if ("${i}" == "1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryContent = "Web Content Content 3",
					key_rowPosition = "${i}",
					locator1 = "Fragment#CONTENT_DISPLAY_FRAGMENT_BODY");
			}
			if ("${i}" == "2") {
				AssertVisible(
					key_colPosition = "${i}",
					key_entryContent = "Web Content Content ${i}",
					key_rowPosition = "1",
					locator1 = "Fragment#CONTENT_DISPLAY_FRAGMENT_BODY");
			}
			if ("${i}" == "3") {
				AssertVisible(
					key_colPosition = "${i}",
					key_entryContent = "Web Content Content 1",
					key_rowPosition = "1",
					locator1 = "Fragment#CONTENT_DISPLAY_FRAGMENT_BODY");
			}
		}

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Content Page Name 2",
			siteName = "Test Site Name");

		for (var i : list "1,2,3") {
			if ("${i}" == "1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryContent = "Web Content Content 3",
					key_rowPosition = "${i}",
					locator1 = "Fragment#CONTENT_DISPLAY_FRAGMENT_BODY");
			}
			if ("${i}" == "2") {
				AssertVisible(
					key_colPosition = "${i}",
					key_entryContent = "Web Content Content ${i}",
					key_rowPosition = "1",
					locator1 = "Fragment#CONTENT_DISPLAY_FRAGMENT_BODY");
			}
			if ("${i}" == "3") {
				AssertVisible(
					key_colPosition = "${i}",
					key_entryContent = "Web Content Content 1",
					key_rowPosition = "1",
					locator1 = "Fragment#CONTENT_DISPLAY_FRAGMENT_BODY");
			}
		}
	}

}
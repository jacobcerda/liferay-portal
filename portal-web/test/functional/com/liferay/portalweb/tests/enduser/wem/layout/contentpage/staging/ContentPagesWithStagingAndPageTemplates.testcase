@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Activate local live staging") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name");

			Staging.activateStagingCP(siteName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name-staging");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name-staging",
				layoutPageTemplateCollectionName = "Page Template Collection",
				site = "false");
		}

		task ("Add a page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name-staging",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template",
				site = "false");
		}

		task ("Add a Title fragment to the page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name-staging");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Add a Rich Text fragment to the page template") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text");
		}

		task ("Publish the page template") {
			Button.clickPublish();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Content pages created from page templates can be published to live and will not appear in live until published."
	@priority = "5"
	test PublishContentPage {
		property portal.acceptance = "true";

		task ("Add a content page that uses the page template") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name-staging");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Content Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page in the staging site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name Staging");
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is present") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Navigate to the URL of what the content page should be in the live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the content page does not yet exist in the live site") {
			AssertTextPresent(value1 = "The requested resource could not be found.");
		}

		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to the content page in the live site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is present") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}
	}

}
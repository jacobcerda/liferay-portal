@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Navigate to fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			Navigator.openURL();

			Site.tearDownCP();
		}
	}

	@description = "This is a test case for LPS-80625. The fragment importer should not allow non-zip files to be imported."
	@priority = "5"
	test CannotImportNonZip {
		property portal.acceptance = "true";

		task ("Navigate to the fragment import screen") {
			FragmentsAdminNavigator.gotoImportCollection();
		}

		task ("Attempt to import a non-zip file") {
			UploadCommonFile(
				locator1 = "TextInput#FILE",
				value1 = "Document_1.doc");
		}

		task ("Assert the form validator displays an error that the file is not a zip file") {
			Pause(locator1 = "10000");

			AssertTextEquals(
				locator1 = "Message#ERROR_FORM_VALIDATION",
				value1 = "Please enter a file with a valid extension (zip).");

			IFrame.closeFrame();
		}
	}

	@description = "This is a test case for LPS-101256. The fragment composition could be exported and imported."
	@priority = "4"
	test ExportFragmentCompositionAndImport {
		task ("Add a fragment collection") {
			FragmentsAdmin.addCollection(
				collectionDescription = "Collection Description",
				collectionName = "Collection Name");
		}

		task ("Navigate to the fragment collection") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");
		}

		task ("Add a fragment that uses the Button fragment code") {
			FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

			FragmentsEditor.gotoConfigurationTab();

			Pause(locator1 = "3000");

			FragmentsEditor.typeFileContent(fileName = "fragment_button_configuration.json");

			FragmentsEditor.gotoCodeTab();

			Pause(locator1 = "3000");

			FragmentsEditor.typeFileContent(fileName = "fragment_button_configuration.html");

			FragmentsEditor.publish();
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add a Section to page") {
			PageEditor.addLayoutSection(dropTarget = "//div[contains(@class,'page-editor__root page-editor__topper')]");
		}

		task ("Add the created fragment into Section") {
			PageEditor.gotoTab(tabName = "Fragments");

			PageEditor.expandFragmentCollection(collectionName = "Collection Name");

			Click(
				key_elementType = "Section",
				key_position = "1",
				locator1 = "PageEditor#LAYOUT_ELEMENTS_HEADER");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_fragmentName = "Fragment Name",
				key_position = "1",
				locator1 = "PageEditor#SECTION_BUILDER_FRAGMENTS",
				locator2 = "PageEditor#SECTION_CONTAINER",
				value1 = "");

			AssertElementPresent(
				key_elementHeader = "//div[contains(@class,'page-editor__topper')][1]/div[contains(.,'Fragment Name')]//li[contains(@class,'title')]",
				key_position = "1",
				locator1 = "PageEditor#SECTION_CONTAINER_NESTED_ELEMENT");
		}

		PageEditor.gotoSaveAsFrgament(fragmentName = "Section");

		PageEditorComposition.saveAsFragment(
			collectionName = "Collection Name",
			fragmentName = "New Fragment Name");

		PageEditor.clickPublish();

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

		task ("Export the fragment collection") {
			FragmentsAdmin.exportCollection(collectionName = "Collection Name");
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "New Site Name");
		}

		task ("Navigate to fragments admin in the new site") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "new-site-name");
		}

		task ("Import the fragment collection into the new site") {
			FragmentsAdmin.importCollectionFromTempFolder();
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "new-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "New Fragment Name",
			withSection = "true");

		AssertElementPresent(
			key_elementHeader = "/div[contains(.,'Fragment Name')]//li[contains(@class,'title')]",
			key_position = "1",
			locator1 = "PageEditor#SECTION_CONTAINER_NESTED_ELEMENT");
	}

	@description = "Fragment collections can be exported and imported."
	@priority = "5"
	test ExportImportCollectionViewFragment {
		property portal.acceptance = "true";

		task ("Add a fragment collection") {
			FragmentsAdmin.addCollection(
				collectionDescription = "Collection Description",
				collectionName = "Collection Name");
		}

		task ("Navigate to the fragment collection") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");
		}

		task ("Add a section fragment that uses the Button fragment code") {
			FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.html");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.css");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.js");

			Button.clickPublish();

			FragmentsAdmin.viewEntryPresent(entry = "Fragment Name");
		}

		task ("Export the fragment collection") {
			FragmentsAdmin.exportCollection(collectionName = "Collection Name");
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "New Site Name");
		}

		task ("Navigate to fragments admin in the new site") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "new-site-name");
		}

		task ("Import the fragment collection into the new site") {
			FragmentsAdmin.importCollectionFromTempFolder();
		}

		task ("Navigate to the fragment collection in the new site") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");
		}

		task ("Assert the section fragment survived the import and the fragment preview displays the Button fragment") {
			FragmentsAdminNavigator.gotoEntry(entry = "Fragment Name");

			SelectFrame.selectFrameNoLoading(locator1 = "FragmentEditor#PREVIEW_IFRAME");

			for (var button : list "Submit,Cancel") {
				Button.viewPresent(button = "${button}");
			}

			IFrame.selectTopFrame();
		}
	}

	@description = "This is a test case for LPS-101256. Can duplicate fragment in layout elements in composition."
	@priority = "4"
	test ImportFragmentWithDupicateFragmentComposition {
		task ("Navigate to the fragment import screen") {
			FragmentsAdminNavigator.gotoImportCollection();
		}

		task ("Import fragment dependencies") {
			UploadCommonFile(
				locator1 = "TextInput#FILE",
				value1 = "collections-duplcatefragment.zip");

			SelectFrameTop();

			Click.mouseDownMouseUp(
				key_text = "Import",
				locator1 = "Modal#ANY_BUTTON");
		}

		task ("Assert the zip imported properly") {
			AssertElementNotPresent(locator1 = "Message#ERROR");
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "New Fragment Name",
			withSection = "true");

		AssertElementPresent(locator1 = "//div[contains(@class,'col-4')]//li[contains(@class,'title')][contains(.,'Heading')]");

		AssertElementPresent(locator1 = "xpath=(//div[contains(@class,'col-4')]//li[contains(@class,'title')][contains(.,'Heading')])[2]");

		AssertElementPresent(locator1 = "//div[contains(@class,'col-4')]/following::li[contains(@class,'title')][contains(.,'Heading')]");
	}

	@description = "This is a test case for LPS-101256. The fragment replacing HTML,CSS,JS,JSON in dependencies survives after importing."
	@priority = "4"
	test ImportFragmentWithHTMLCSSJSJSONReplaced {
		task ("Navigate to the fragment import screen") {
			FragmentsAdminNavigator.gotoImportCollection();
		}

		task ("Import fragment dependencies") {
			UploadCommonFile(
				locator1 = "TextInput#FILE",
				value1 = "collections-HTMLCSSJSJSON-replace.zip");

			SelectFrameTop();

			Click.mouseDownMouseUp(
				key_text = "Import",
				locator1 = "Modal#ANY_BUTTON");
		}

		task ("Assert the zip imported properly") {
			AssertElementNotPresent(locator1 = "Message#ERROR");
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "New Fragment Name",
			withSection = "true");

		AssertElementPresent(
			key_elementHeader = "/div[contains(@class,'page-editor__topper')][1]/div[contains(.,'Fragment Name')]//li[contains(@class,'title')]",
			key_position = "1",
			locator1 = "PageEditor#SECTION_CONTAINER_NESTED_ELEMENT");

		AssertElementPresent(
			key_color = "success",
			key_text = "Here we go",
			locator1 = "Button#ANY_WITH_COLOR");

		AssertElementPresent(locator1 = "//div[contains(@class,'page-editor__fragment-content')][contains(.,'border: solid violet')]");

		PageEditor.gotoConfiguration(fragmentName = "Fragment Name");

		// This is a bug filed in LPS-112814

		AssertTextEquals(
			key_fieldLabel = "Button Text",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Description");

		ClickNoError(
			key_text = "Here we go",
			locator1 = "Button#ANY");

		AssertConfirm(value1 = "Here we go");
	}

	@description = "This is a test case for LPS-101256. Can edit inline content of fragment in composition."
	@priority = "4"
	test ImportFragmentWithInlineContentEdited {
		task ("Navigate to the fragment import screen") {
			FragmentsAdminNavigator.gotoImportCollection();
		}

		task ("Import fragment dependencies") {
			UploadCommonFile(
				locator1 = "TextInput#FILE",
				value1 = "collections-InlineContent-edited.zip");

			SelectFrameTop();

			Click.mouseDownMouseUp(
				key_text = "Import",
				locator1 = "Modal#ANY_BUTTON");
		}

		task ("Assert the zip imported properly") {
			AssertElementNotPresent(locator1 = "Message#ERROR");
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "New Fragment Name",
			withSection = "true");

		AssertElementPresent(
			key_elementHeader = "/div[contains(@class,'page-editor__topper')][1]/div[contains(.,'Modify Text')]//li[contains(@class,'title')]",
			key_position = "1",
			locator1 = "PageEditor#SECTION_CONTAINER_NESTED_ELEMENT");
	}

	@description = "This is a testcase for LPS-96113. All fragments in dependencies should validate successfully."
	@priority = "5"
	test ValidateDependenciesFragments {
		property portal.acceptance = "true";

		task ("Navigate to the fragment import screen") {
			FragmentsAdminNavigator.gotoImportCollection();
		}

		task ("Import fragment dependencies") {
			UploadCommonFile(
				locator1 = "TextInput#FILE",
				value1 = "fragment-collection.zip");

			SelectFrameTop();

			Click.mouseDownMouseUp(
				key_text = "Import",
				locator1 = "Modal#ANY_BUTTON");
		}

		task ("Assert the zip imported properly") {
			AssertElementNotPresent(locator1 = "Message#ERROR");
		}

		task ("Assert that all fragments validated") {
			AssertElementNotPresent(
				key_infoMessage = "The following fragments have validation issues",
				locator1 = "Message#INFO_SPECIFIC");
		}
	}

}
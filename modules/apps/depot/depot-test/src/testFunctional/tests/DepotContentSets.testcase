@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This ensures that the documents with document type can be selected through Content Sets in a depot."
	@priority = "5"
	test AddDocTypeDocumentsManually {
		for (var i : list "1,2") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(
				depotName = "Test Depot Name",
				portlet = "Documents and Media");

			DMNavigator.gotoDocumentType();

			DMDocumentType.add(
				dmDocumentTypeDescription = "DM Document Type Description",
				dmDocumentTypeFieldNames = "Text Box",
				dmDocumentTypeName = "DM Document Type Name ${i}");
		}

		for (var i : list "1,2") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(
				depotName = "Test Depot Name",
				portlet = "Documents and Media");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title ${i}",
				dmDocumentTypeName = "DM Document Type Name 2");
		}

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.addManualSelection(
			assetListTitle = "Depot Manual Asset List",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.viewAssetTypeList(
			assetListName = "Depot Manual Asset List",
			assetType = "Web Content Folder,Basic Document,Basic Web Content,Google Drive Shortcut,Documents Folder,DM Document Type Name 1,DM Document Type Name 2");

		for (var i : list "1,2") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(
				depotName = "Test Depot Name",
				portlet = "Content Sets");

			AssetListsAdmin.selectAsset(
				assetListName = "Depot Manual Asset List",
				assetName = "DM Document Title ${i}",
				assetType = "DM Document Type Name 2");
		}

		for (var documentName : list "DM Document Title 1,DM Document Title 2") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(
				depotName = "Test Depot Name",
				portlet = "Content Sets");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Manual Asset List",
				assetTitle = "${documentName}",
				assetType = "Document");
		}
	}

	@description = "This ensures that the scope can be changed through dynamic selection in a depot."
	@priority = "5"
	test ChangeScope {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Second Depot Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC Depot 1 Title");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Second Depot Name",
			site = "false",
			title = "WC Depot 2 Title");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.addDynamicSelection(assetListTitle = "Depot Dynamic Asset List");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.configureScope(
			assetListTitle = "Depot Dynamic Asset List",
			depotName = "Test Second Depot Name");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.removeScope(
			assetListTitle = "Depot Dynamic Asset List",
			scopeName = "Current Site");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.viewContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "WC Depot 2 Title",
			assetType = "Web Content Article");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.viewNoContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "WC Depot 1 Title",
			assetType = "Web Content Article");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.configureScope(
			assetListTitle = "Depot Dynamic Asset List",
			depotName = "Test Depot Name");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.removeScope(
			assetListTitle = "Depot Dynamic Asset List",
			scopeName = "Test Second Depot Name");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.viewContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "WC Depot 1 Title",
			assetType = "Web Content Article");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.viewNoContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "WC Depot 2 Title",
			assetType = "Web Content Article");
	}

	@description = "This ensures that content sets from a site can select the basic web content stored in a depot."
	@priority = "5"
	test CreateSetOnSiteUsingDepotWC {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "site-name");

		AssetListsAdmin.addManualSelection(assetListTitle = "Site Manual Asset List");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "site-name");

		AssetListsAdmin.selectAsset(
			assetListName = "Site Manual Asset List",
			assetName = "WC WebContent Title",
			assetType = "Basic Web Content",
			depotName = "Test Depot Name");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(assetListName = "Site Manual Asset List");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssertTextEquals(
			key_assetTitle = "WC WebContent Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE_EXACT_MATCH",
			value1 = "WC WebContent Title");
	}

	@description = "This ensures that the image is displayed by AP through Content Sets in a depot."
	@priority = "5"
	test DisplayImageInAP {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpeg",
			dmDocumentTitle = "Document Title");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.addManualSelection(
			assetListTitle = "Depot Manual Asset List",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.viewAssetList(
			assetListTitle = "Depot Manual Asset List",
			type = "Manual");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.selectAsset(
			assetListName = "Depot Manual Asset List",
			assetName = "Document Title",
			assetType = "Basic Document");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(
			assetListName = "Depot Manual Asset List",
			depotName = "Test Depot Name");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssertTextEquals(
			key_assetTitle = "Document Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE_EXACT_MATCH",
			value1 = "Document Title");
	}

	@description = "This ensures that tagged the web content is displayed by AP through dynamic selection in a depot."
	@priority = "5"
	test DisplayWebContentWithTagInAP {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.doc",
			dmDocumentTitle = "Document Title");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithTagCP(
			tagNameList = "tag1",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.addDynamicSelection(
			assetListTitle = "Depot Dynamic Asset List",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.viewAssetList(
			assetListTitle = "Depot Dynamic Asset List",
			type = "Dynamic");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.editAssetList(assetListTitle = "Depot Dynamic Asset List");

		AssetListsAdmin.configureAssetEntryType(selectedAsset = "Web Content Article");

		AssetListsAdmin.addTagsFilter(tagNameList = "tag1");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(
			assetListName = "Depot Dynamic Asset List",
			depotName = "Test Depot Name");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssertTextEquals(
			key_assetTitle = "Web Content Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE_EXACT_MATCH",
			value1 = "Web Content Title");
	}

	@description = "This ensures that multiple web content can be selected through Content Sets in a depot."
	@priority = "5"
	test ExcludeImagesDynamically {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.doc",
			dmDocumentTitle = "Document Title");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithTagCP(
			tagNameList = "tag1",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.addDynamicSelection(
			assetListTitle = "Depot Dynamic Asset List",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.viewAssetList(
			assetListTitle = "Depot Dynamic Asset List",
			type = "Dynamic");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.editAssetList(assetListTitle = "Depot Dynamic Asset List");

		AssetListsAdmin.configureAssetEntryType(selectedAsset = "Web Content Article");

		AssetListsAdmin.addTagsFilter(tagNameList = "tag1");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(
			assetListName = "Depot Dynamic Asset List",
			depotName = "Test Depot Name");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssertTextEquals(
			key_assetTitle = "Document Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE_EXACT_MATCH",
			value1 = "Document Title");
	}

	@description = "This ensures that the asset can be removed in Content Sets."
	@priority = "4"
	test RemoveAssetFromContentSet {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		for (var i : list "1,2,3") {
			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title ${i}");

			PortletEntry.publish();
		}

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.addManualSelection(
			assetListTitle = "Depot Manual Asset List",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.viewAssetList(
			assetListTitle = "Depot Manual Asset List",
			type = "Manual");

		for (var i : list "1,2,3") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(
				depotName = "Test Depot Name",
				portlet = "Content Sets");

			AssetListsAdmin.selectAsset(
				assetListName = "Depot Manual Asset List",
				assetName = "WC WebContent Title ${i}",
				assetType = "Basic Web Content");
		}

		AssetListsAdmin.deleteManualSelectionAssets(assetsList = "WC WebContent Title 2");

		for (var i : list "1,3") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(
				depotName = "Test Depot Name",
				portlet = "Content Sets");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Manual Asset List",
				assetTitle = "WC WebContent Title ${i}",
				assetType = "Web Content Article");
		}

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.viewNoContent(
			assetListTitle = "Depot Manual Asset List",
			assetTitle = "WC WebContent Title 2",
			assetType = "Web Content Article");
	}

	@description = "This ensures that only web contents configured to show with dynamic selection are displayed in a depot."
	@priority = "4"
	test SelectAllWebContentDynamically {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Document Title");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		for (var i : list "1,2,3") {
			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title ${i}");

			PortletEntry.publish();
		}

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.addDynamicSelection(
			assetListTitle = "Depot Dynamic Asset List",
			depotName = "Test Depot Name");

		for (var i : list "1,2,3") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Dynamic Asset List",
				assetTitle = "WC WebContent Title ${i}",
				assetType = "Web Content Article");
		}

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.viewContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "Document Title",
			assetType = "Document");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.editAssetList(assetListTitle = "Depot Dynamic Asset List");

		AssetListsAdmin.configureAssetEntryType(selectedAsset = "Web Content Article");

		for (var i : list "1,2,3") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Dynamic Asset List",
				assetTitle = "WC WebContent Title ${i}",
				assetType = "Web Content Article");
		}

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.viewNoContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "Document Title",
			assetType = "Document");
	}

	@description = "This ensures that an image can be selected from other depot through dynamic selection that does not contain the keyword."
	@priority = "5"
	test SelectDocumentFromOtherScopeDynamically {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Second Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Second Depot Name",
			portlet = "Documents and Media");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.doc,Document_2.doc");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Second Depot Name",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpeg",
			dmDocumentTitle = "DM Image Title");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.addDynamicSelection(
			assetListTitle = "Depot Dynamic Asset List",
			depotName = "Test Depot Name");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.configureScope(
			assetListTitle = "Depot Dynamic Asset List",
			depotName = "Test Second Depot Name");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.editAssetList(assetListTitle = "Depot Dynamic Asset List");

		AssetListsAdmin.addKeywordsFilter(
			keyWords = "doc",
			queryAndOperator = "Any",
			queryContains = "Does Not Contain");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.viewContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "DM Image Title",
			assetType = "Document");

		for (var i : list "1,2") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

			AssetListsAdmin.viewNoContent(
				assetListTitle = "Depot Dynamic Asset List",
				assetTitle = "Document_${i}.doc",
				assetType = "Document");
		}
	}

	@description = "This ensures that multiple documents can be selected through Content Sets in a depot."
	@priority = "5"
	test SelectMultipleDocumentsManually {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.doc,Document_2.jpg,Document_3.txt");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.addManualSelection(assetListTitle = "Depot Manual Asset List");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.viewAssetList(
			assetListTitle = "Depot Manual Asset List",
			type = "Manual");

		for (var documentName : list "Document_1.doc,Document_2.jpg,Document_3.txt") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(
				depotName = "Test Depot Name",
				portlet = "Content Sets");

			AssetListsAdmin.selectAsset(
				assetListName = "Depot Manual Asset List",
				assetName = "${documentName}",
				assetType = "Basic Document");
		}

		for (var documentName : list "Document_1.doc,Document_2.jpg,Document_3.txt") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(
				depotName = "Test Depot Name",
				portlet = "Content Sets");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Manual Asset List",
				assetTitle = "${documentName}",
				assetType = "Document");
		}
	}

	@description = "This ensures that multiple web content can be selected through Content Sets in a depot."
	@priority = "5"
	test SelectMultipleWebContentManually {
		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Depot Name",
				site = "false",
				title = "WC WebContent Title ${i}");
		}

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.addManualSelection(
			assetListTitle = "Depot Manual Asset List",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssetListsAdmin.viewAssetList(
			assetListTitle = "Depot Manual Asset List",
			type = "Manual");

		for (var i : list "1,2,3") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(
				depotName = "Test Depot Name",
				portlet = "Content Sets");

			AssetListsAdmin.selectAsset(
				assetListName = "Depot Manual Asset List",
				assetName = "WC WebContent Title ${i}",
				assetType = "Basic Web Content");
		}

		for (var i : list "1,2,3") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(
				depotName = "Test Depot Name",
				portlet = "Content Sets");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Manual Asset List",
				assetTitle = "WC WebContent Title ${i}",
				assetType = "Web Content Article");
		}
	}

	@description = "This ensures that web contents from all the scopes can be selected through dynamic selection in a depot."
	@priority = "4"
	test SelectWCFromAllScopesDynamically {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Second Depot Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Third Depot Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC Depot 1 Title");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Second Depot Name",
			site = "false",
			title = "WC Depot 2 Title");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Third Depot Name",
			site = "false",
			title = "WC Depot 3 Title");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.addDynamicSelection(assetListTitle = "Depot Dynamic Asset List");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.configureScope(
			assetListTitle = "Depot Dynamic Asset List",
			depotName = "Test Second Depot Name");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.configureScope(
			assetListTitle = "Depot Dynamic Asset List",
			depotName = "Test Third Depot Name");

		for (var i : list "1,2,3") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Dynamic Asset List",
				assetTitle = "WC Depot ${i} Title",
				assetType = "Web Content Article");
		}
	}

	@description = "This ensures that a web content can be selected from other depot through dynamic selection that does not contain the keyword."
	@priority = "5"
	test SelectWCFromOtherScopeDynamically {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Second Depot Name");

		for (var i : list "1 2,2 3,3 4") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Second Depot Name",
				site = "false",
				title = "WC WebContent Title ${i}");
		}

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.addDynamicSelection(assetListTitle = "Depot Dynamic Asset List");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.configureScope(
			assetListTitle = "Depot Dynamic Asset List",
			depotName = "Test Second Depot Name");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.editAssetList(assetListTitle = "Depot Dynamic Asset List");

		AssetListsAdmin.addKeywordsFilter(
			keyWords = "3",
			queryAndOperator = "Any",
			queryContains = "Does Not Contain");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.viewContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "WC WebContent Title 1 2",
			assetType = "Web Content Article");

		for (var i : list "2 3,3 4") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

			AssetListsAdmin.viewNoContent(
				assetListTitle = "Depot Dynamic Asset List",
				assetTitle = "WC WebContent Title ${i}",
				assetType = "Web Content Article");
		}
	}

	@description = "This ensures that the web content created by the structure can be selected via searching for the corresponding structure name."
	@priority = "5"
	test SelectWebContentWithStructure {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		for (var i : list "1,2") {
			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "WC WebContent Text ${i}",
				webContentTitle = "WC WebContent Title ${i}");

			PortletEntry.publish();
		}

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

		AssetListsAdmin.addManualSelection(assetListTitle = "Depot Manual Asset List");

		for (var i : list "1,2") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Depot Manual Asset List",
				assetName = "WC WebContent Title ${i}",
				assetType = "WC Structure Name");
		}

		for (var i : list "1,2") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-depot-name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Manual Asset List",
				assetTitle = "WC WebContent Title ${i}",
				assetType = "Web Content Article");
		}
	}

	@description = "This ensures that Content Sets can be set in a depot."
	@priority = "5"
	test Smoke {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Content Sets");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO_TAGLIB_TITLE",
			value1 = "No Content Sets yet.");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO_TAGLIB_DESCRIPTION",
			value1 = "Fortunately, it is very easy to add new ones.");

		LexiconEntry.gotoAdd();

		MenuItem.viewPresent(menuItem = "Manual Selection");

		MenuItem.viewPresent(menuItem = "Dynamic Selection");

		Refresh();

		Click(locator1 = "Message#EMPTY_INFO_TAGLIB");

		Click.waitForMenuToggleJSClick(locator1 = "Dropdown#EMPTY_MESSAGE_DROPDOWN");

		AssertElementPresent(
			key_menuItem = "Manual Selection",
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

		AssertElementPresent(
			key_menuItem = "Dynamic Selection",
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
	}

}